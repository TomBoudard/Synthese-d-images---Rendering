#version 430 core

layout(binding = 2, rgba32f) uniform image2D framebuffer;
layout(binding = 3, rgba32f) uniform image2D variancebuffer;

uniform sampler2D colorTexture;
uniform sampler2D envMap;
uniform bool useNormalMap;
uniform sampler2D normalMap;
uniform mat4 mat_inverse;
uniform mat4 persp_inverse;
uniform vec3 lightIntensity;
uniform vec3 lightPosition;
uniform bool blinnPhong;
uniform bool transparent;
uniform float shininess;
uniform int maxTrace;
uniform vec3 etaReal;
uniform vec3 etaImag;
uniform bool gammaCorrection;
uniform bool participatingEnv;
uniform float radius;
uniform float groundDistance;
uniform vec3 center;
uniform int frame_index;

#define HALTON_SIZE 128
float halton2[HALTON_SIZE] = {0.5, 0.25, 0.75, 0.125, 0.625, 0.375, 0.875, 0.0625, 0.5625, 0.3125, 0.8125, 0.1875, 0.6875, 0.4375, 0.9375, 0.03125, 0.53125, 0.28125, 0.78125, 0.15625, 0.65625, 0.40625, 0.90625, 0.09375, 0.59375, 0.34375, 0.84375, 0.21875, 0.71875, 0.46875, 0.96875, 0.015625, 0.515625, 0.265625, 0.765625, 0.140625, 0.640625, 0.390625, 0.890625, 0.078125, 0.578125, 0.328125, 0.828125, 0.203125, 0.703125, 0.453125, 0.953125, 0.046875, 0.546875, 0.296875, 0.796875, 0.171875, 0.671875, 0.421875, 0.921875, 0.109375, 0.609375, 0.359375, 0.859375, 0.234375, 0.734375, 0.484375, 0.984375, 0.0078125, 0.5078125, 0.2578125, 0.7578125, 0.1328125, 0.6328125, 0.3828125, 0.8828125, 0.0703125, 0.5703125, 0.3203125, 0.8203125, 0.1953125, 0.6953125, 0.4453125, 0.9453125, 0.0390625, 0.5390625, 0.2890625, 0.7890625, 0.1640625, 0.6640625, 0.4140625, 0.9140625, 0.1015625, 0.6015625, 0.3515625, 0.8515625, 0.2265625, 0.7265625, 0.4765625, 0.9765625, 0.0234375, 0.5234375, 0.2734375, 0.7734375, 0.1484375, 0.6484375, 0.3984375, 0.8984375, 0.0859375, 0.5859375, 0.3359375, 0.8359375, 0.2109375, 0.7109375, 0.4609375, 0.9609375, 0.0546875, 0.5546875, 0.3046875, 0.8046875, 0.1796875, 0.6796875, 0.4296875, 0.9296875, 0.1171875, 0.6171875, 0.3671875, 0.8671875, 0.2421875, 0.7421875, 0.4921875, 0.9921875, 0.00390625};
float halton3[HALTON_SIZE] = {0.3333333333333333, 0.6666666666666666, 0.1111111111111111, 0.4444444444444444, 0.7777777777777778, 0.2222222222222222, 0.5555555555555556, 0.8888888888888888, 0.037037037037037035, 0.37037037037037035, 0.7037037037037037, 0.14814814814814814, 0.48148148148148145, 0.8148148148148148, 0.25925925925925924, 0.5925925925925926, 0.9259259259259259, 0.07407407407407407, 0.4074074074074074, 0.7407407407407407, 0.18518518518518517, 0.5185185185185185, 0.8518518518518519, 0.2962962962962963, 0.6296296296296297, 0.9629629629629629, 0.012345679012345678, 0.345679012345679, 0.6790123456790124, 0.12345679012345678, 0.4567901234567901, 0.7901234567901234, 0.2345679012345679, 0.5679012345679012, 0.9012345679012346, 0.04938271604938271, 0.38271604938271603, 0.7160493827160493, 0.16049382716049382, 0.49382716049382713, 0.8271604938271605, 0.2716049382716049, 0.6049382716049383, 0.9382716049382716, 0.08641975308641975, 0.41975308641975306, 0.7530864197530864, 0.19753086419753085, 0.5308641975308642, 0.8641975308641975, 0.30864197530864196, 0.6419753086419753, 0.9753086419753086, 0.024691358024691357, 0.35802469135802467, 0.691358024691358, 0.13580246913580246, 0.4691358024691358, 0.8024691358024691, 0.24691358024691357, 0.5802469135802469, 0.9135802469135802, 0.06172839506172839, 0.3950617283950617, 0.7283950617283951, 0.1728395061728395, 0.5061728395061729, 0.8395061728395061, 0.2839506172839506, 0.6172839506172839, 0.9506172839506173, 0.09876543209876543, 0.43209876543209874, 0.7654320987654321, 0.20987654320987653, 0.5432098765432098, 0.8765432098765432, 0.32098765432098764, 0.654320987654321, 0.9876543209876543, 0.00411522633744856, 0.3374485596707819, 0.6707818930041153, 0.11522633744855967, 0.448559670781893, 0.7818930041152263, 0.22633744855967078, 0.5596707818930041, 0.8930041152263375, 0.0411522633744856, 0.37448559670781895, 0.7078189300411523, 0.1522633744855967, 0.48559670781893005, 0.8189300411522634, 0.26337448559670784, 0.5967078189300411, 0.9300411522633745, 0.07818930041152264, 0.411522633744856, 0.7448559670781894, 0.18930041152263374, 0.522633744855967, 0.8559670781893004, 0.3004115226337449, 0.6337448559670782, 0.9670781893004116, 0.01646090534979424, 0.3497942386831276, 0.6831275720164609, 0.12757201646090535, 0.4609053497942387, 0.7942386831275721, 0.23868312757201646, 0.5720164609053497, 0.9053497942386831, 0.053497942386831275, 0.3868312757201646, 0.720164609053498, 0.1646090534979424, 0.49794238683127573, 0.831275720164609, 0.2757201646090535, 0.6090534979423868, 0.9423868312757202, 0.09053497942386832, 0.42386831275720166, 0.757201646090535};

#define MAX_SCENE_BOUNDS    100.0
#define EPS                 0.000001

#define MIN_DISTANCE EPS
#define GROUND_VPTR -1

#define NB_SCATTER 100

#define M_PI   3.14159265358979323846
#define M_1_PI 0.31830988618

#define Ka 0.05
#define Kd 0.3

#define coefAbso vec3(0.3, 0.025, 0.005)
#define coefScatter vec3(0.15, 0.03, 0.01)

struct hitinfo_t {
    /* Index of the first index of the triangle */
    /* or: GROUND_VPTR */
    int hit_vptr;
    /* Intersection distance, barycentric coordinates */
    /* or: intersection distance, 0, texture coordinates (for the ground) */
    vec4 t;
};

struct BVHNode {
    vec4 min;
    vec4 max;
    int nbTriangles;
    int index;
};

layout (std430, binding = 1) buffer Vertices
{
    vec4 vertices[];
};

layout (std430, binding = 2) buffer Normals
{
    vec4 normals[];
};

layout (std430, binding = 3) buffer Colors
{
    vec4 colors[];
};

layout (std430, binding = 4) buffer Meshes
{
    int indices[];
};

layout (std430, binding = 5) buffer BVHNodes
{
    BVHNode nodes[];
};

// Gold Noise ©2015 dcerisano@standard3d.com
// - based on the Golden Ratio
// - uniform normalized distribution
// - fastest static noise generator function (also runs at low precision)
// - use with indicated fractional seeding method. 

float PHI = 1.61803398874989484820459;  // Φ = Golden Ratio   

float gold_noise(in vec2 xy, in float seed){
       return fract(tan(distance(xy*PHI, xy)*seed)*xy.x);
}

float hash11(float p)
{
    return fract(sin(p) * 43758.5453);
}

float hash12(vec2 p) {
    return fract(sin(dot(p, vec2(12.9898, 78.233))) * 43758.5453);
}

float hash13(vec3 p)
{
    vec3 p1 = fract(p * 0.1031);
    p1 += dot(p1, p1.yzx + 19.19);
    return fract((p1.x + p1.y) * p1.z);
}

// Check whether there is an intersection between the ray (origin, dir) and the bounding box (bbmin, bbmax), 
// stores into tNear the nearest point of intersection on the ray.
bool intersectBoundingBox(vec4 origin, vec4 dir, vec4 bbmin, vec4 bbmax, out float tNear)
{
	// intersect with BB:
    vec4 sMin = (bbmin - origin) / dir;
    vec4 sMax = (bbmax - origin) / dir;

    vec4 tMin = min(sMin, sMax);
    vec4 tMax = max(sMin, sMax);

    tNear = max(max(tMin.x, tMin.y), tMin.z);
    float tFar = min(min(tMax.x, tMax.y), tMax.z);

	if (tNear < 0) tNear = 0; // starting point inside the BVH
    return tNear <= tFar;
}

// intersect ray (origin, dir) with triangle defined by ptr (number inside indexed face set)
// returns a boolean, plus the "t" of hitinfo structure (Intersection distance, barycentric coordinates)
bool intersectTriangle(vec4 origin, vec4 dir, int ptr, out vec4 dist, bool reverse)
{


	// vertices from data:
    vec4 v0 = vertices[indices[ptr]];
    vec4 v1 = vertices[indices[ptr + 1]];
    vec4 v2 = vertices[indices[ptr + 2]];

    vec3 e1 = (v1 - v0).xyz;
    vec3 e2 = (v2 - v0).xyz;

    // Both orientation triangle
    if (reverse) {
        vec3 temp = e1;
        e1 = e2;
        e2 = temp;
    }

    vec3 p = cross(dir.xyz, e2);
    float det = dot(e1, p);

    

    if (abs(det) < EPS) return false;

    // We do early exit here: as soon as we can return false, we do.
    // In my tests, it is faster than computing all coordinates, 
    // *then* checking validity with a single test. YMMV, feel free to test
    vec3 t = (origin - v0).xyz;
    dist.y = dot(t, p);
    if (dist.y < 0.0 || dist.y > det) return false;
    vec3 q = cross(t, e1);
    dist.z = dot(dir.xyz, q);
    if (dist.z < 0.0 || dist.z > det) return false;
    dist.w = det - dist.y - dist.z;
    if (dist.w < 0.0) return false;
    dist.x = dot(e2, q);
    dist /= det;
    if (reverse) {
        float temp = dist.y;
        dist.y = dist.z;
        dist.z = temp;
    }
    return (dist.x > EPS);
}

bool intersectGround(vec4 origin, vec4 dir, out vec4 dist)
{
    if (abs(dir.y) < EPS)
        return false;
    float t = -(origin.y + groundDistance) / dir.y;

    if (t < MIN_DISTANCE)
        return false;

    vec4 point = origin + t * dir;
    point.y = -groundDistance;
    vec4 scaledPoint = point / radius ;
    vec2 texCoords = 0.5 * scaledPoint.xz + 0.5;

    dist = vec4(t, 0.0, texCoords);

    return true;
}

vec4 interpolateColor(hitinfo_t h)
{
	if (colors.length() > 0) {
		vec4 c0 = colors[indices[h.hit_vptr]];
		vec4 c1 = colors[indices[h.hit_vptr + 1]];
		vec4 c2 = colors[indices[h.hit_vptr + 2]];
		return (h.t.w * c0 + h.t.y * c1 + h.t.z * c2);
	} else return vec4(0.7, 0.7, 0.7, 1.0);
}

vec4 interpolateNormal(hitinfo_t h)
{
    if (h.hit_vptr != -1)  {

        vec4 n0 = normals[indices[h.hit_vptr]];
        vec4 n1 = normals[indices[h.hit_vptr + 1]];
        vec4 n2 = normals[indices[h.hit_vptr + 2]];
        return normalize(h.t.w * n0 + h.t.y * n1 + h.t.z * n2);

    } else {
        return vec4(0, 1, 0, 0);
    }
}

// BVH-related functions:
bool isLeaf(BVHNode node)
{
    return node.nbTriangles != 0;
}

bool intersectBVHLeaf(BVHNode node, vec4 origin, vec4 dir, inout hitinfo_t h, bool reverse)
{
    bool hit = false;

    for (int i = 0; i < node.nbTriangles; ++i) {
        int vptr = 3 * (node.index + i);
        vec4 dist;
        if (intersectTriangle(origin, dir, vptr, dist, reverse) && dist.x < h.t.x) {
            hit = true;
            h.hit_vptr = vptr;
            h.t = dist;
        }
    }

    return hit;
}

bool intersectBVHLeaf(BVHNode node, vec4 origin, vec4 dir)
{
    for (int i = 0; i < node.nbTriangles; ++i) {
        int vptr = 3 * (node.index + i);
        vec4 dist;
        if (intersectTriangle(origin, dir, vptr, dist, false))
            return true;
    }

    return false;
}

#define MAX_STACK_SIZE 64

#define push(stack, size, value) stack[size++] = value
#define pop(stack, size) stack[--size]

bool intersectBVH(vec4 origin, vec4 dir, inout hitinfo_t h, bool reverse)
{
    int rootIndex = 0;
    BVHNode rootNode = nodes[rootIndex];
    float tNear;

    if (!intersectBoundingBox(origin, dir, rootNode.min, rootNode.max, tNear))
        return false;

    struct StackElement {
        int index;
        float t;
    } stack[MAX_STACK_SIZE];
    int size = 0;

    push(stack, size, StackElement(rootIndex, 0.0));

    bool hit = false;


    while (size != 0) {
        StackElement current = pop(stack, size);
        if (h.t.x < current.t)
            continue;

        BVHNode currentNode = nodes[current.index];
        if (isLeaf(currentNode)) {
            hit = intersectBVHLeaf(currentNode, origin, dir, h, reverse) || hit;
        } else {
            StackElement left = StackElement(current.index + 1, 0.0);
            BVHNode leftNode = nodes[left.index];
            bool hitLeft = intersectBoundingBox(origin, dir, leftNode.min, leftNode.max, left.t);

            StackElement right = StackElement(currentNode.index, 0.0);
            BVHNode rightNode = nodes[right.index];
            bool hitRight = intersectBoundingBox(origin, dir, rightNode.min, rightNode.max, right.t);

            if (hitLeft && hitRight) {
                if (left.t < right.t) {
                    push(stack, size, right);
                    push(stack, size, left);
                } else {
                    push(stack, size, left);
                    push(stack, size, right);
                }
            } else if (hitLeft) {
                push(stack, size, left);
            } else if (hitRight) {
                push(stack, size, right);
            }
        }
    }


    return hit;
}

bool intersectBVH(vec4 origin, vec4 dir)
{
    int rootIndex = 0;
    BVHNode rootNode = nodes[rootIndex];
    float tNear;

    if (!intersectBoundingBox(origin, dir, rootNode.min, rootNode.max, tNear))
        return false;

    int stack[MAX_STACK_SIZE];
    int size = 0;

    push(stack, size, rootIndex);

    while (size != 0) {
        int current = pop(stack, size);
        BVHNode currentNode = nodes[current];
        if (isLeaf(currentNode)) {
            if (intersectBVHLeaf(currentNode, origin, dir))
                return true;
        } else {
            int left = current + 1;
            BVHNode leftNode = nodes[left];
            bool hitLeft = intersectBoundingBox(origin, dir, leftNode.min, leftNode.max, tNear);

            int right = currentNode.index;
            BVHNode rightNode = nodes[right];
            bool hitRight = intersectBoundingBox(origin, dir, rightNode.min, rightNode.max, tNear);

            if (hitLeft && hitRight) {
                push(stack, size, right);
                push(stack, size, left);
            } else if (hitLeft) {
                push(stack, size, left);
            } else if (hitRight) {
                push(stack, size, right);
            }
        }
    }

    return false;
}
// End BVH-related functions

// Compute the first intersection along the ray (origin, dir). 
// returns the nearest intersection in h
bool firstIntersection(vec4 origin, vec4 dir, out hitinfo_t h, bool reverse)
{
    h.t.x = radius * MAX_SCENE_BOUNDS;

    bool hit = intersectBVH(origin, dir, h, reverse);

    vec4 dist;
    if (intersectGround(origin, dir, dist) && dist.x < h.t.x) {
        hit = true;
        h.hit_vptr = GROUND_VPTR;
        h.t = dist;
    }

	return hit;
}

// checks whether there is any intersection along the ray (origin, dir)
// Does not compute the nearest intersection, ends the loop as soon as an intersection is found.
bool isIntersected(vec4 origin, vec4 dir)
{
    vec4 dist;
    return intersectGround(origin, dir, dist) || intersectBVH(origin, dir);
}

// Local illumination related functions.

vec2 cmult(vec2 z1, vec2 z2) {
    return vec2(z1.x*z2.x-z1.y*z2.y, z1.x*z2.y+z1.y*z2.x);
}

vec2 csqrt(vec2 z) {
    float re = sqrt(1./2. * (length(z) + z.x));
    float im = (z.y < 0. ? -1. : 1.) * sqrt(1./2. * max(0., (length(z) - z.x)));
    return vec2(re, im);
}

vec4 fresnel(float cos_theta, vec3 etaReal, vec3 etaImag) {
    float sin_theta_2 = 1. - cos_theta * cos_theta;
    vec2 etaR = vec2(etaReal.x, etaImag.x);
    vec2 etaG = vec2(etaReal.y, etaImag.y);
    vec2 etaB = vec2(etaReal.z, etaImag.z);
    vec2 ciR = csqrt(cmult(etaR, etaR) - vec2(sin_theta_2, 0));
    vec2 ciG = csqrt(cmult(etaG, etaG) - vec2(sin_theta_2, 0));
    vec2 ciB = csqrt(cmult(etaB, etaB) - vec2(sin_theta_2, 0));

    float sqrt_fsR = length(vec2(cos_theta, 0) - ciR) / length(vec2(cos_theta, 0) + ciR);
    float sqrt_fsG = length(vec2(cos_theta, 0) - ciG) / length(vec2(cos_theta, 0) + ciG);
    float sqrt_fsB = length(vec2(cos_theta, 0) - ciB) / length(vec2(cos_theta, 0) + ciB);
    vec3 sqrt_fs = vec3(sqrt_fsR, sqrt_fsG, sqrt_fsB);
    vec3 Fs = sqrt_fs * sqrt_fs;

    float sqrt_fpR = length(cos_theta * cmult(etaR, etaR) - ciR) / length(cos_theta * cmult(etaR, etaR) + ciR);
    float sqrt_fpG = length(cos_theta * cmult(etaG, etaG) - ciG) / length(cos_theta * cmult(etaG, etaG) + ciG);
    float sqrt_fpB = length(cos_theta * cmult(etaB, etaB) - ciB) / length(cos_theta * cmult(etaB, etaB) + ciB);
    vec3 sqrt_fp = vec3(sqrt_fpR, sqrt_fpG, sqrt_fpB);
    vec3 Fp = sqrt_fp * sqrt_fp;

    return vec4(min(vec3(1), (Fs + Fp) / 2.), 1.);
}

float GGXMicroFacetDistribution(float cos_theta, float alpha) {
    if (cos_theta <= 0.) return 0.;
    float tan_theta_2 = (1. - cos_theta * cos_theta) / (cos_theta * cos_theta);
    return (alpha * alpha) / ((alpha * alpha + tan_theta_2) * (alpha * alpha + tan_theta_2)) * (M_1_PI / pow(cos_theta, 4.));
}

float GGXShadowMasking(float cos_theta, float alpha) {
    float sin_theta_2 = (1. - cos_theta * cos_theta);
    return 1. / (cos_theta + pow(cos_theta * cos_theta + alpha * alpha * sin_theta_2, 1./2.));
}

float map(float value, float min1, float max1, float min2, float max2) {
  return min2 + (value - min1) * (max2 - min2) / (max1 - min1);
}

vec4 directIllumination(vec4 color, float ka, float kd, vec4 p, vec4 n, vec4 v, vec4 l, vec4 lightColor, float shadowMask)
{
	// Goal: compute direct illumination at point p, from the light source at lightPosition.
	// color: local material color, RGBA
	// p: coordinates of intersection point, xyzw
	// n: normal at intersection point, xyzw
	// v: incoming viewing direction. Points towards the eye.

    // Ambient lighting
    vec4 Ca = ka * color * lightColor;

    // Diffuse lighting
    vec4 Cd = kd * color * max(dot(n, l), 0.) * lightColor;

    // Specular lighting
    vec4 H = normalize(v + l);

    float cos_theta_d = dot(H, l);

    vec4 F = fresnel(cos_theta_d, etaReal, etaImag) * smoothstep(0., 0.1, dot(l, n));

    vec4 Cs;
    if (blinnPhong) {
        Cs = F * color * pow(max(dot(n, H), 0.), shininess) * lightColor;
    } else {
        float cos_theta_h = dot(n, H);
        float cos_theta_i = dot(n, l);
        float cos_theta_o = dot(n, v);

        float alpha = map(shininess, 0, 200, 0.5, 0.0);

        float D = GGXMicroFacetDistribution(cos_theta_h, alpha);
        float Gi = GGXShadowMasking(cos_theta_i, alpha);
        float Go = GGXShadowMasking(cos_theta_o, alpha);

        Cs = F * D * Gi * Go * lightColor;
    }
    
    return Ca + (Cd + Cs) * shadowMask;
}

const int MAX_TRACE = 20;

void getLocal(vec4 origin, vec4 dir, hitinfo_t h, out vec4 color, out vec4 p, out vec4 n)
{
    p = origin + h.t.x * dir;
    if (h.hit_vptr == GROUND_VPTR) {
        color = texture(colorTexture, h.t.pq);
        p.y = -groundDistance;
        if (useNormalMap) {
            vec3 normal = 2*(texture(normalMap, h.t.pq).xyz) - 1.;
            n = normalize(vec4(normal.x, normal.z, -normal.y, 0.0));
        }
        else{
            n = vec4(0.0, 1.0, 0.0, 0.0);
        }
    } else {
        color = interpolateColor(h);
        n = interpolateNormal(h);
    }
}


vec3 scatteredLight(vec4 origin, vec4 hit, bool inSurf) {
    vec3 scatColor = vec3(0.);
    float step = length(hit - origin) / NB_SCATTER;
    for (int i = 0; i < NB_SCATTER; i++) {
        float t = (i + 1.) / (NB_SCATTER + 1);
        vec4 scatPos = (1. - t) * origin + t * hit;
        // float shadow = isIntersected(scatPos, vec4(lightPosition, 1.) - scatPos) ? 0. : 1.;
        float depth = length(origin - scatPos) + length(scatPos - vec4(lightPosition, 1.));
        vec3 scatAbsoCoef = inSurf ? vec3(0.) : exp(-(coefAbso+coefScatter)*depth);
        scatColor += coefScatter * scatAbsoCoef * lightIntensity * step;
    }
    return scatColor;
}

vec4 monteCarloDirection(vec4 normal, vec4 dir, out float probability) {

    float Ks = 1.;
    int randomChoice = int(gold_noise(vec2(gl_GlobalInvocationID.xy + vec2(frame_index)), 491.214));

    int offset = int(gold_noise(vec2(gl_GlobalInvocationID.xy), 491.214) * HALTON_SIZE);
    float u1 = halton2[(frame_index + offset) % HALTON_SIZE];
    float u2 = halton3[(frame_index + offset) % HALTON_SIZE];

    //https://www.cs.cornell.edu/~srm/publications/EGSR07-btdf.pdf
    if (randomChoice < Kd/(Kd + Ks)){
        //Diffus
        float phi = u1*2*M_1_PI;
        float theta = acos(1-2*u2);
        float rdX = sin(theta)*cos(phi);
        float rdY = sin(theta)*sin(phi);
        float rdZ = cos(theta);
        vec4 rdDir = vec4(rdX, rdY, rdZ, 0.);

        if (dot(rdDir,normal) < 0){
            rdDir = -rdDir;
        }

        return rdDir;
        
    }
    else{
        //Specular
        float phi = 2*M_PI*u1;
        float theta;
        if (blinnPhong){
            theta = acos(pow(u1, 1/(shininess+2)));

            probability = 1; //FIXME
        }
        else{
            float alpha = map(shininess, 0, 200, 0.5, 0.0);
            theta = atan(alpha*sqrt(u2), sqrt(1-u2));

            probability = GGXMicroFacetDistribution(cos(theta), alpha);

        }
        float rdX = sin(theta)*cos(phi);
        float rdY = sin(theta)*sin(phi);
        float rdZ = cos(theta);

        vec4 rdNormal = vec4(rdX, rdY, rdZ, 0.);

        if (dot(rdNormal.xyz,normal.xyz) < 0){
            rdNormal = -rdNormal;
        }

        return reflect(dir, rdNormal);
    }
}

struct trace_state_t
{
    vec4 origin;  // start of ray
    vec4 dir;     // direction
    vec4 color;   // color after multiple bounces
    vec4 localColor;   // color of the material (after interpolation)
    hitinfo_t h;  // what the ray hits (triangle Id, u, v, lambda)
    vec4 hit;     // point the ray hits 
    vec4 Ld;      // direction to light at destination
    vec4 N;       // normal at destination
    bool inSurf;  // is inside surface
    float probability; // probability of the importance sampling for specular
};

vec4 trace(vec4 origin, vec4 dir)
{
    // These variables are for TP2
    trace_state_t stack[MAX_TRACE + 1];
    bool fallback[MAX_TRACE + 1];
    int sp = 0;

	// These are for TP1:
    hitinfo_t hl;
    vec4 hit;
    vec4 localColor;
    vec4 N;
    float probability;

    float specular_factor, LdN;

	// if (firstIntersection(origin, dir, hl, false)) {
	// 	getLocal(origin, dir, hl, localColor, hit, N);

    //     // shadow masking
    //     vec4 l = normalize(vec4(lightPosition, 1.) - stack[sp].hit);
    //     float shadowMask = (dot(l, N) < 0 || isIntersected(hit+1000.*EPS*N, l)) ? 0. : 1.;

	// 	return directIllumination(localColor, Ka, Kd, hit, N, -dir, l, vec4(lightIntensity, 1), shadowMask);
	// }

    bool inSurf = false;
    float sens = 1.;
    float nbTrans = 0.;
    float nbRebon = 0.;

    fallback[sp] = firstIntersection(origin, dir, hl, inSurf);
    while (sp < maxTrace + 1 && fallback[sp]) {
        
        getLocal(origin, dir, hl, localColor, hit, N);

        stack[sp].origin = origin;
        stack[sp].dir = dir;
        stack[sp].localColor = localColor;
        stack[sp].h = hl;
        stack[sp].hit = hit;
        stack[sp].Ld = normalize(vec4(lightPosition, 1.) - hit);
        stack[sp].N = sens * N;
        stack[sp].inSurf = inSurf;
        // stack[sp].probability = probability;

        // Monte-Carlo Felix
        // Refletion uniform
        // float phi = 2. * M_PI * hash12(hit.xy + 14.75 * fract(frame_index * 5945.269));
        // float u = 2. * hash12(hit.zy + 27.43 * fract(frame_index * 1426.816)) - 1.;
        // float root = sqrt(1. - u*u);
        // dir = vec4(root*cos(phi), root*sin(phi), u, 0.);
        // dir = dot(dir, stack[sp].N) > 0 ? dir : -dir;

        // Monte-Carlo Path-Tracing Tom
        // dir = monteCarloDirection(stack[sp].N, dir, probability);

        // Reflection speculaire
        dir = reflect(dir, stack[sp].N);
        origin = hit + 1000 * EPS * dir; //stack[sp].N;
        
        // Refraction / transparence
        float etaMoy = (etaReal.r+etaReal.g+etaReal.b)/3.;
        float etaSurf = inSurf ? 1./etaMoy : etaMoy;
        vec4 F = fresnel(dot(stack[sp].N, -stack[sp].dir), vec3(etaSurf), vec3(0.));
        
        // vec4 trans = stack[sp].dir;
        vec4 trans = refract(stack[sp].dir, stack[sp].N, 1./etaSurf);
        vec4 transOri = hit - 1000 * EPS * trans; //stack[sp].N;

        bool test = (transparent && (stack[sp].h.hit_vptr != GROUND_VPTR) && hash13(origin.xyz + frame_index*42.123) > F.x);
        
        nbRebon += 1.;
        if (test) {
            nbTrans += 1.;
            nbRebon -= 1.;
            dir = trans;
            origin = transOri;
            sens *= -1.;
            inSurf = !(inSurf);
        }

        sp += 1;
        fallback[sp] = firstIntersection(origin, dir, hl, inSurf);
    }

    vec2 envCoord = vec2(atan(dir.x, dir.z)*M_1_PI*0.5+0.5, 1.-acos(dir.y)*M_1_PI);
    vec4 color = vec4(0.);
    // vec4 color = texture(envMap, envCoord);

    if (participatingEnv) {
        color = vec4(scatteredLight(origin, (origin + hl.t.x * dir), inSurf), 1.);
    }

    while (sp > 0) {
        sp -= 1;

        vec4 F = vec4(1.);
        if (!transparent || stack[sp].h.hit_vptr == GROUND_VPTR) {
            F = fresnel(dot(stack[sp].N, -stack[sp].dir), etaReal, etaImag);
        }

        vec4 indCol = color * F;
        // directIllumination(
        //     stack[sp].localColor,
        //     0., 0.,
        //     stack[sp].hit,
        //     stack[sp].N,
        //     -stack[sp].dir,
        //     reflect(stack[sp].dir, stack[sp].N),
        //     color,
        //     1.
        // );
        
        // shadow masking
        vec4 l = normalize(vec4(lightPosition, 1.) - stack[sp].hit);
        float shadowMask = (dot(l, stack[sp].N) < 0 || isIntersected(stack[sp].hit+1000*EPS*stack[sp].N, l)) ? 0. : 1.;

        vec4 dirCol = directIllumination(
            stack[sp].localColor,
            (transparent && stack[sp].h.hit_vptr != GROUND_VPTR) ? 0. : Ka,
            (transparent && stack[sp].h.hit_vptr != GROUND_VPTR) ? 0. : Kd,
            stack[sp].hit,
            stack[sp].N,
            -stack[sp].dir,
            l,
            vec4(lightIntensity, 1),
            shadowMask
        );

        // On fait du brouillard
        // http://www.sci.utah.edu/publications/pegoraro09/Pegoraro_CGF09.pdf

        float d = length(stack[sp].origin - stack[sp].hit);
        vec3 absoCoef = stack[sp].inSurf ? vec3(1.) : exp(-(coefAbso+coefScatter)*d);
        absoCoef = participatingEnv ? absoCoef : vec3(1.);
        // absoCoef = vec3(1.);
        float dbis = length(lightPosition - stack[sp].hit.xyz);
        vec3 absoCoefL = stack[sp].inSurf ? vec3(1.) : exp(-(coefAbso+coefScatter)*dbis);
        absoCoefL = participatingEnv ? absoCoefL : vec3(1.);
        // absoCoefL = vec3(1.);

        vec3 scatColor = vec3(0);
        if (participatingEnv) {
            scatColor = scatteredLight(stack[sp].origin, stack[sp].hit, inSurf);
        }
        color = vec4((dirCol.rgb * absoCoefL + indCol.rgb) * absoCoef + scatColor, 1.);

        // color /= stack[sp].probability; // importance sampling

        // color = vec4(vec3(d) / 1000., 1);
        // color = stack[sp].N;
        stack[sp].color = color;
    }

    return color;
}

layout (local_size_x = 8, local_size_y = 8) in;
void main(void) {
	// Convert local screen coordinates into world coordinates

    ivec2 pix = ivec2(gl_GlobalInvocationID.xy);
    
    vec4 previousColor = imageLoad(framebuffer, pix);
    vec4 nextColor = previousColor;
    vec4 previousVariance = imageLoad(variancebuffer, pix);
    vec4 nextVariance = previousVariance;
    vec4 sigma = sqrt(previousVariance - previousColor * previousColor);

    if (frame_index > 10 && max(sigma.x, max(sigma.y, sigma.z)) < 0.05) {
        return;
    }

    ivec2 size = imageSize(framebuffer);
    if (pix.x >= size.x || pix.y >= size.y) {
        return;
    }

    // golden noise random
    // float rd_x = gold_noise(vec2(gl_GlobalInvocationID.xy), fract(129.4535*frame_index)) - 0.5;
    // float rd_y = gold_noise(vec2(gl_GlobalInvocationID.xy), fract(257.249*frame_index)) - 0.5;

    // halton random
    int offset = int(gold_noise(vec2(gl_GlobalInvocationID.xy), 491.214) * HALTON_SIZE);
    float rd_x = halton2[(frame_index + offset) % HALTON_SIZE] - 0.5;
    float rd_y = halton3[(frame_index + offset) % HALTON_SIZE] - 0.5;

    vec2 shift = vec2(rd_x, rd_y);
    vec2 pos = (vec2(pix) + shift) / (size - vec2(0.5, 0.5));

    // pos in [0,1]^2 Need it in [-1,1]^2:
    pos = 2 * pos - vec2(1., 1.);

    // Step 1: I need pixel coordinates.
    vec4 worldPos = vec4(pos.x, pos.y, 1.0, 1.0);
    worldPos = persp_inverse * worldPos;
    worldPos /= worldPos.w;
    worldPos.w = 0;
    worldPos = normalize(worldPos);
    // Step 2: ray direction:
    vec4 dir = normalize((mat_inverse * worldPos));
    vec4 eye = (mat_inverse * vec4(0, 0, 0, 1));
    vec4 color = trace(eye, dir);

    if (gammaCorrection) color = pow(color, vec4(vec3(.4545), 1.));

    // if (color.r > 1. || color.g > 1. || color.b > 1.) color = vec4(1, 0, 1, 1);

    // if (isnan(color.x)) color = vec4(1, 1, 1, 1);

    // color = vec4(rd_x+0.5, rd_y+0.5, 0, 1);

    nextColor = (previousColor * frame_index + color) / (frame_index + 1.);

    nextVariance = (previousVariance * frame_index + color*color) / (frame_index + 1.);

    // vec4 sigma = sqrt(nextVariance - nextColor * nextColor);
    // if (max(sigma.x, max(sigma.y, sigma.z)) < 0.1) {
    //     nextColor = vec4(0, 1, 1, 1);
    // }

    // halton point visualization
    // vec2 range = vec2(1, 1);
    // vec2 origi = vec2(0, 0);
    // vec2 uv = range * pix / size + origi;
    // nextColor = vec4(0, 0, 0, 1);
    // float threshold = 0.0025;
    // for (int i = 0; i < HALTON_SIZE; i++) {
    //     if (abs(halton2[i] - uv.x) < threshold && abs(halton3[i] - uv.y) < threshold) {
    //         nextColor = vec4(vec3(1.), 1);
    //     }
    // }
    // vec2 pas = range / size;
    // if ((fract(uv.y) < pas.y) ||
    //     (fract(uv.x) < pas.x)) {
    //     nextColor = vec4(1, 0, 0, 1);
    // }
    // if ((abs(uv.y - pas.y/2.) < pas.y) ||
    //     (abs(uv.x - pas.x/2.) < pas.x)) {
    //     nextColor = vec4(0, 1, 1, 1);
    // }

    // fresnel function visualisation
    // vec2 uv = vec2(3, 10) * pix / size + vec2(-1, 0);
    // nextColor = vec4(smoothstep(0.05, 0., abs(fresnel(cos(uv.x*M_PI/2.), etaReal, etaImag).xyz-vec3(uv.y))), 1.);
    // // nextColor.rgb += smoothstep(0.005, 0., abs(vec3(cos(uv.x*M_PI/2.)) - vec3(uv.y)));
    // if (abs(uv.y - 1.) < 0.002) {
    //     nextColor = vec4(1, 0, 0, 1);
    // }
    // // if (isnan(fresnel(cos(uv.x*M_PI/2.), etaReal, etaImag).z)) nextColor = vec4(1, 0, 1, 1);

    // fresnel color visualisation
    // vec2 uv = vec2(1, 2) * pix / vec2(640, 480);
    // nextColor = uv.y > 1. ? vec4(1, 0, 0, 1) : vec4(0, 0, 1, 1);
    // if (abs(uv.y - 1.) < 0.05) {
    //     nextColor = vec4(0, 0, 0, 1);
    // }

    // fresnel color visualisation
    // vec2 uv = vec2(100, 1) * pix / size;
    // nextColor = vec4(smoothstep(0.005, 0., abs(exp(-vec3(0.6, 0.05, 0.01)*uv.x)-vec3(uv.y))), 1.);

    imageStore(variancebuffer, pix, nextVariance);
    imageStore(framebuffer, pix, nextColor);
}





























