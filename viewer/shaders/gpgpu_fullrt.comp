#version 430 core

layout(binding = 2, rgba32f) uniform image2D framebuffer;
layout(binding = 3, rgba32f) uniform image2D variancebuffer;

uniform sampler2D colorTexture;
uniform sampler2D envMap;
uniform bool useNormalMap;
uniform sampler2D normalMap;
uniform mat4 mat_inverse;
uniform mat4 persp_inverse;
uniform vec3 lightIntensity;
uniform vec3 lightPosition;
uniform bool blinnPhong;
uniform bool transparent;
uniform float shininess;
uniform vec3 etaReal;
uniform vec3 etaImag;
uniform bool gammaCorrection;
uniform float radius;
uniform float groundDistance;
uniform vec3 center;
uniform int frame_index;

#define HALTON_SIZE 128
float halton2[HALTON_SIZE] = {0.6666666666666666, 0.3333333333333333, 1.0, 0.16666666666666666, 0.8333333333333333, 0.5, 1.1666666666666667, 0.08333333333333333, 0.75, 0.41666666666666663, 1.0833333333333333, 0.25, 0.9166666666666666, 0.5833333333333334, 1.25, 0.041666666666666664, 0.7083333333333333, 0.375, 1.0416666666666667, 0.20833333333333331, 0.8749999999999999, 0.5416666666666666, 1.2083333333333335, 0.125, 0.7916666666666666, 0.4583333333333333, 1.125, 0.2916666666666667, 0.9583333333333333, 0.625, 1.2916666666666667, 0.020833333333333332, 0.6875, 0.35416666666666663, 1.0208333333333333, 0.1875, 0.8541666666666666, 0.5208333333333334, 1.1875, 0.10416666666666666, 0.7708333333333334, 0.43749999999999994, 1.1041666666666665, 0.2708333333333333, 0.9375, 0.6041666666666667, 1.2708333333333333, 0.0625, 0.7291666666666666, 0.3958333333333333, 1.0625, 0.22916666666666666, 0.8958333333333333, 0.5625, 1.2291666666666667, 0.14583333333333334, 0.8125, 0.47916666666666663, 1.1458333333333333, 0.3125, 0.9791666666666666, 0.6458333333333334, 1.3125, 0.010416666666666666, 0.6770833333333333, 0.34375, 1.0104166666666667, 0.17708333333333331, 0.8437499999999999, 0.5104166666666666, 1.1770833333333335, 0.09375, 0.7604166666666666, 0.4270833333333333, 1.09375, 0.2604166666666667, 0.9270833333333333, 0.59375, 1.2604166666666667, 0.05208333333333333, 0.7187499999999999, 0.3854166666666667, 1.0520833333333335, 0.21874999999999997, 0.8854166666666665, 0.5520833333333333, 1.2187500000000002, 0.13541666666666666, 0.8020833333333333, 0.46875, 1.1354166666666667, 0.30208333333333337, 0.9687499999999999, 0.6354166666666666, 1.3020833333333335, 0.03125, 0.6979166666666666, 0.3645833333333333, 1.03125, 0.19791666666666666, 0.8645833333333333, 0.53125, 1.1979166666666667, 0.11458333333333333, 0.78125, 0.44791666666666663, 1.1145833333333333, 0.28125, 0.9479166666666666, 0.6145833333333334, 1.28125, 0.07291666666666667, 0.7395833333333333, 0.40625, 1.0729166666666667, 0.23958333333333331, 0.9062499999999999, 0.5729166666666666, 1.2395833333333335, 0.15625, 0.8229166666666666, 0.4895833333333333, 1.15625, 0.3229166666666667, 0.9895833333333333, 0.65625, 1.3229166666666667, 0.005208333333333333};
float halton3[HALTON_SIZE] = {0.3749999999999999, 0.7499999999999998, 0.125, 0.49999999999999994, 0.875, 0.25, 0.6249999999999999, 0.9999999999999999, 0.041666666666666664, 0.4166666666666667, 0.7916666666666666, 0.1666666666666667, 0.5416666666666665, 0.9166666666666669, 0.2916666666666666, 0.6666666666666666, 1.041666666666667, 0.08333333333333333, 0.4583333333333332, 0.8333333333333334, 0.20833333333333331, 0.5833333333333333, 0.9583333333333333, 0.3333333333333334, 0.7083333333333335, 1.083333333333333, 0.013888888888888885, 0.3888888888888889, 0.7638888888888887, 0.13888888888888892, 0.5138888888888891, 0.8888888888888888, 0.26388888888888884, 0.6388888888888888, 1.0138888888888884, 0.05555555555555554, 0.43055555555555564, 0.8055555555555554, 0.18055555555555552, 0.5555555555555557, 0.9305555555555552, 0.3055555555555555, 0.6805555555555556, 1.0555555555555554, 0.09722222222222224, 0.47222222222222227, 0.8472222222222217, 0.22222222222222215, 0.597222222222222, 0.9722222222222223, 0.3472222222222221, 0.7222222222222219, 1.0972222222222223, 0.02777777777777777, 0.4027777777777776, 0.7777777777777778, 0.15277777777777776, 0.5277777777777776, 0.902777777777778, 0.27777777777777785, 0.6527777777777777, 1.0277777777777781, 0.06944444444444445, 0.44444444444444436, 0.8194444444444446, 0.19444444444444445, 0.569444444444444, 0.9444444444444446, 0.3194444444444444, 0.6944444444444445, 1.0694444444444446, 0.11111111111111108, 0.48611111111111094, 0.8611111111111113, 0.23611111111111116, 0.6111111111111112, 0.9861111111111114, 0.36111111111111105, 0.7361111111111108, 1.1111111111111114, 0.00462962962962963, 0.3796296296296296, 0.7546296296296299, 0.12962962962962965, 0.5046296296296293, 0.8796296296296295, 0.25462962962962954, 0.6296296296296295, 1.0046296296296293, 0.046296296296296294, 0.4212962962962962, 0.7962962962962964, 0.1712962962962963, 0.5462962962962962, 0.9212962962962963, 0.29629629629629617, 0.6712962962962962, 1.046296296296296, 0.08796296296296295, 0.46296296296296313, 0.8379629629629626, 0.21296296296296294, 0.5879629629629631, 0.9629629629629627, 0.3379629629629629, 0.7129629629629631, 1.0879629629629621, 0.018518518518518524, 0.3935185185185187, 0.7685185185185182, 0.14351851851851857, 0.5185185185185185, 0.8935185185185184, 0.26851851851851855, 0.6435185185185188, 1.018518518518518, 0.060185185185185175, 0.43518518518518534, 0.8101851851851848, 0.18518518518518523, 0.5601851851851853, 0.935185185185185, 0.3101851851851851, 0.6851851851851853, 1.0601851851851845, 0.10185185185185182, 0.4768518518518523, 0.8518518518518516};

#define MAX_SCENE_BOUNDS    10.0
#define EPS                 0.000001

#define MIN_DISTANCE EPS
#define GROUND_VPTR -1

#define M_PI   3.14159265358979323846
#define M_1_PI 0.31830988618

#define Ka 0.05
#define Kd 0.3

struct hitinfo_t {
    /* Index of the first index of the triangle */
    /* or: GROUND_VPTR */
    int hit_vptr;
    /* Intersection distance, barycentric coordinates */
    /* or: intersection distance, 0, texture coordinates (for the ground) */
    vec4 t;
};

struct BVHNode {
    vec4 min;
    vec4 max;
    int nbTriangles;
    int index;
};

layout (std430, binding = 1) buffer Vertices
{
    vec4 vertices[];
};

layout (std430, binding = 2) buffer Normals
{
    vec4 normals[];
};

layout (std430, binding = 3) buffer Colors
{
    vec4 colors[];
};

layout (std430, binding = 4) buffer Meshes
{
    int indices[];
};

layout (std430, binding = 5) buffer BVHNodes
{
    BVHNode nodes[];
};

// Gold Noise ©2015 dcerisano@standard3d.com
// - based on the Golden Ratio
// - uniform normalized distribution
// - fastest static noise generator function (also runs at low precision)
// - use with indicated fractional seeding method. 

float PHI = 1.61803398874989484820459;  // Φ = Golden Ratio   

float gold_noise(in vec2 xy, in float seed){
       return fract(tan(distance(xy*PHI, xy)*seed)*xy.x);
}

float hash11(float p)
{
    return fract(sin(p) * 43758.5453);
}

float hash12(vec2 p) {
    return fract(sin(dot(p, vec2(12.9898, 78.233))) * 43758.5453);
}

float hash13(vec3 p)
{
    vec3 p1 = fract(p * 0.1031);
    p1 += dot(p1, p1.yzx + 19.19);
    return fract((p1.x + p1.y) * p1.z);
}

// Check whether there is an intersection between the ray (origin, dir) and the bounding box (bbmin, bbmax), 
// stores into tNear the nearest point of intersection on the ray.
bool intersectBoundingBox(vec4 origin, vec4 dir, vec4 bbmin, vec4 bbmax, out float tNear)
{
	// intersect with BB:
    vec4 sMin = (bbmin - origin) / dir;
    vec4 sMax = (bbmax - origin) / dir;

    vec4 tMin = min(sMin, sMax);
    vec4 tMax = max(sMin, sMax);

    tNear = max(max(tMin.x, tMin.y), tMin.z);
    float tFar = min(min(tMax.x, tMax.y), tMax.z);

	if (tNear < 0) tNear = 0; // starting point inside the BVH
    return tNear <= tFar;
}

// intersect ray (origin, dir) with triangle defined by ptr (number inside indexed face set)
// returns a boolean, plus the "t" of hitinfo structure (Intersection distance, barycentric coordinates)
bool intersectTriangle(vec4 origin, vec4 dir, int ptr, out vec4 dist)
{
	// vertices from data:
    vec4 v0 = vertices[indices[ptr]];
    vec4 v1 = vertices[indices[ptr + 1]];
    vec4 v2 = vertices[indices[ptr + 2]];

    vec3 e1 = (v1 - v0).xyz;
    vec3 e2 = (v2 - v0).xyz;

    vec3 p = cross(dir.xyz, e2);
    float det = dot(e1, p);
    if (abs(det) < EPS) return false;

    // We do early exit here: as soon as we can return false, we do.
    // In my tests, it is faster than computing all coordinates, 
    // *then* checking validity with a single test. YMMV, feel free to test
    vec3 t = (origin - v0).xyz;
    dist.y = dot(t, p);
    if (dist.y < 0.0 || dist.y > det) return false;
    vec3 q = cross(t, e1);
    dist.z = dot(dir.xyz, q);
    if (dist.z < 0.0 || dist.z > det) return false;
    dist.w = det - dist.y - dist.z;
    if (dist.w < 0.0) return false;
    dist.x = dot(e2, q);
    dist /= det;
    return (dist.x > EPS);
}

bool intersectGround(vec4 origin, vec4 dir, out vec4 dist)
{
    if (abs(dir.y) < EPS)
        return false;
    float t = -(origin.y + groundDistance) / dir.y;

    if (t < MIN_DISTANCE)
        return false;

    vec4 point = origin + t * dir;
    point.y = -groundDistance;
    vec4 scaledPoint = point / radius ;
    vec2 texCoords = 0.5 * scaledPoint.xz + 0.5;

    dist = vec4(t, 0.0, texCoords);

    return true;
}

vec4 interpolateColor(hitinfo_t h)
{
	if (colors.length() > 0) {
		vec4 c0 = colors[indices[h.hit_vptr]];
		vec4 c1 = colors[indices[h.hit_vptr + 1]];
		vec4 c2 = colors[indices[h.hit_vptr + 2]];
		return (h.t.w * c0 + h.t.y * c1 + h.t.z * c2);
	} else return vec4(0.7, 0.7, 0.7, 1.0);
}

vec4 interpolateNormal(hitinfo_t h)
{
    if (h.hit_vptr != -1)  {

        vec4 n0 = normals[indices[h.hit_vptr]];
        vec4 n1 = normals[indices[h.hit_vptr + 1]];
        vec4 n2 = normals[indices[h.hit_vptr + 2]];

        return normalize(h.t.w * n0 + h.t.y * n1 + h.t.z * n2);

    } else {
        return vec4(0, 1, 0, 0);
    }
}

// BVH-related functions:
bool isLeaf(BVHNode node)
{
    return node.nbTriangles != 0;
}

bool intersectBVHLeaf(BVHNode node, vec4 origin, vec4 dir, inout hitinfo_t h)
{
    bool hit = false;

    for (int i = 0; i < node.nbTriangles; ++i) {
        int vptr = 3 * (node.index + i);
        vec4 dist;
        if (intersectTriangle(origin, dir, vptr, dist) && dist.x < h.t.x) {
            hit = true;
            h.hit_vptr = vptr;
            h.t = dist;
        }
    }

    return hit;
}

bool intersectBVHLeaf(BVHNode node, vec4 origin, vec4 dir)
{
    for (int i = 0; i < node.nbTriangles; ++i) {
        int vptr = 3 * (node.index + i);
        vec4 dist;
        if (intersectTriangle(origin, dir, vptr, dist))
            return true;
    }

    return false;
}

#define MAX_STACK_SIZE 64

#define push(stack, size, value) stack[size++] = value
#define pop(stack, size) stack[--size]

bool intersectBVH(vec4 origin, vec4 dir, inout hitinfo_t h)
{
    int rootIndex = 0;
    BVHNode rootNode = nodes[rootIndex];
    float tNear;

    if (!intersectBoundingBox(origin, dir, rootNode.min, rootNode.max, tNear))
        return false;

    struct StackElement {
        int index;
        float t;
    } stack[MAX_STACK_SIZE];
    int size = 0;

    push(stack, size, StackElement(rootIndex, 0.0));

    bool hit = false;


    while (size != 0) {
        StackElement current = pop(stack, size);
        if (h.t.x < current.t)
            continue;

        BVHNode currentNode = nodes[current.index];
        if (isLeaf(currentNode)) {
            hit = intersectBVHLeaf(currentNode, origin, dir, h) || hit;
        } else {
            StackElement left = StackElement(current.index + 1, 0.0);
            BVHNode leftNode = nodes[left.index];
            bool hitLeft = intersectBoundingBox(origin, dir, leftNode.min, leftNode.max, left.t);

            StackElement right = StackElement(currentNode.index, 0.0);
            BVHNode rightNode = nodes[right.index];
            bool hitRight = intersectBoundingBox(origin, dir, rightNode.min, rightNode.max, right.t);

            if (hitLeft && hitRight) {
                if (left.t < right.t) {
                    push(stack, size, right);
                    push(stack, size, left);
                } else {
                    push(stack, size, left);
                    push(stack, size, right);
                }
            } else if (hitLeft) {
                push(stack, size, left);
            } else if (hitRight) {
                push(stack, size, right);
            }
        }
    }


    return hit;
}

bool intersectBVH(vec4 origin, vec4 dir)
{
    int rootIndex = 0;
    BVHNode rootNode = nodes[rootIndex];
    float tNear;

    if (!intersectBoundingBox(origin, dir, rootNode.min, rootNode.max, tNear))
        return false;

    int stack[MAX_STACK_SIZE];
    int size = 0;

    push(stack, size, rootIndex);

    while (size != 0) {
        int current = pop(stack, size);
        BVHNode currentNode = nodes[current];
        if (isLeaf(currentNode)) {
            if (intersectBVHLeaf(currentNode, origin, dir))
                return true;
        } else {
            int left = current + 1;
            BVHNode leftNode = nodes[left];
            bool hitLeft = intersectBoundingBox(origin, dir, leftNode.min, leftNode.max, tNear);

            int right = currentNode.index;
            BVHNode rightNode = nodes[right];
            bool hitRight = intersectBoundingBox(origin, dir, rightNode.min, rightNode.max, tNear);

            if (hitLeft && hitRight) {
                push(stack, size, right);
                push(stack, size, left);
            } else if (hitLeft) {
                push(stack, size, left);
            } else if (hitRight) {
                push(stack, size, right);
            }
        }
    }

    return false;
}
// End BVH-related functions

// Compute the first intersection along the ray (origin, dir). 
// returns the nearest intersection in h
bool firstIntersection(vec4 origin, vec4 dir, out hitinfo_t h)
{
    h.t.x = radius * MAX_SCENE_BOUNDS;

    bool hit = intersectBVH(origin, dir, h);

    vec4 dist;
    if (intersectGround(origin, dir, dist) && dist.x < h.t.x) {
        hit = true;
        h.hit_vptr = GROUND_VPTR;
        h.t = dist;
    }

	return hit;
}

// checks whether there is any intersection along the ray (origin, dir)
// Does not compute the nearest intersection, ends the loop as soon as an intersection is found.
bool isIntersected(vec4 origin, vec4 dir)
{
    vec4 dist;
    return intersectGround(origin, dir, dist) || intersectBVH(origin, dir);
}

// Local illumination related functions.

vec2 cmult(vec2 z1, vec2 z2) {
    return vec2(z1.x*z2.x-z1.y*z2.y, z1.x*z2.y+z1.y*z2.x);
}

vec2 csqrt(vec2 z) {
    float re = sqrt(1./2. * (length(z) + z.x));
    float im = (z.y < 0. ? -1. : 1.) * sqrt(1./2. * max(0., (length(z) - z.x)));
    return vec2(re, im);
}

vec4 fresnel(float cos_theta, vec3 etaReal, vec3 etaImag) {
    float sin_theta_2 = 1. - cos_theta * cos_theta;
    vec2 etaR = vec2(etaReal.x, etaImag.x);
    vec2 etaG = vec2(etaReal.y, etaImag.y);
    vec2 etaB = vec2(etaReal.z, etaImag.z);
    vec2 ciR = csqrt(cmult(etaR, etaR) - vec2(sin_theta_2, 0));
    vec2 ciG = csqrt(cmult(etaG, etaG) - vec2(sin_theta_2, 0));
    vec2 ciB = csqrt(cmult(etaB, etaB) - vec2(sin_theta_2, 0));

    float sqrt_fsR = length(vec2(cos_theta, 0) - ciR) / length(vec2(cos_theta, 0) + ciR);
    float sqrt_fsG = length(vec2(cos_theta, 0) - ciG) / length(vec2(cos_theta, 0) + ciG);
    float sqrt_fsB = length(vec2(cos_theta, 0) - ciB) / length(vec2(cos_theta, 0) + ciB);
    vec3 sqrt_fs = vec3(sqrt_fsR, sqrt_fsG, sqrt_fsB);
    vec3 Fs = sqrt_fs * sqrt_fs;

    float sqrt_fpR = length(cos_theta * cmult(etaR, etaR) - ciR) / length(cos_theta * cmult(etaR, etaR) + ciR);
    float sqrt_fpG = length(cos_theta * cmult(etaG, etaG) - ciG) / length(cos_theta * cmult(etaG, etaG) + ciG);
    float sqrt_fpB = length(cos_theta * cmult(etaB, etaB) - ciB) / length(cos_theta * cmult(etaB, etaB) + ciB);
    vec3 sqrt_fp = vec3(sqrt_fpR, sqrt_fpG, sqrt_fpB);
    vec3 Fp = sqrt_fp * sqrt_fp;

    return vec4(min(vec3(1), (Fs + Fp) / 2.), 1.);
}

float GGXMicroFacetDistribution(float cos_theta, float alpha) {
    if (cos_theta <= 0.) return 0.;
    float tan_theta_2 = (1. - cos_theta * cos_theta) / (cos_theta * cos_theta);
    return (alpha * alpha) / ((alpha * alpha + tan_theta_2) * (alpha * alpha + tan_theta_2)) * (M_1_PI / pow(cos_theta, 4.));
}

float GGXShadowMasking(float cos_theta, float alpha) {
    float sin_theta_2 = (1. - cos_theta * cos_theta);
    return 1. / (cos_theta + pow(cos_theta * cos_theta + alpha * alpha * sin_theta_2, 1./2.));
}

float map(float value, float min1, float max1, float min2, float max2) {
  return min2 + (value - min1) * (max2 - min2) / (max1 - min1);
}

vec4 directIllumination(vec4 color, float ka, float kd, vec4 p, vec4 n, vec4 v, vec4 l, vec4 lightColor, float shadowMask)
{
	// Goal: compute direct illumination at point p, from the light source at lightPosition.
	// color: local material color, RGBA
	// p: coordinates of intersection point, xyzw
	// n: normal at intersection point, xyzw
	// v: incoming viewing direction. Points towards the eye.

    // Ambient lighting
    vec4 Ca = ka * color * lightColor;

    // Diffuse lighting
    vec4 Cd = kd * color * max(dot(n, l), 0.) * lightColor;

    // Specular lighting
    vec4 H = normalize(v + l);

    float cos_theta_d = dot(H, l);

    vec4 F = fresnel(cos_theta_d, etaReal, etaImag) * smoothstep(0., 0.1, dot(l, n));

    vec4 Cs;
    if (blinnPhong) {
        Cs = F * color * pow(max(dot(n, H), 0.), shininess) * lightColor;
    } else {
        float cos_theta_h = dot(n, H);
        float cos_theta_i = dot(n, l);
        float cos_theta_o = dot(n, v);

        float alpha = map(shininess, 0, 200, 0.5, 0.0);

        float D = GGXMicroFacetDistribution(cos_theta_h, alpha);
        float Gi = GGXShadowMasking(cos_theta_i, alpha);
        float Go = GGXShadowMasking(cos_theta_o, alpha);

        Cs = F * D * Gi * Go * lightColor;
    }
    
    return Ca + (Cd + Cs) * shadowMask;
}

const int MAX_TRACE = 7;

void getLocal(vec4 origin, vec4 dir, hitinfo_t h, out vec4 color, out vec4 p, out vec4 n)
{
    p = origin + h.t.x * dir;
    if (h.hit_vptr == GROUND_VPTR) {
        color = texture(colorTexture, h.t.pq);
        p.y = -groundDistance;
        if (useNormalMap){
            vec3 normal = 2*(texture(normalMap, h.t.pq).xyz) - 1.;
            n = normalize(vec4(normal.x, normal.z, -normal.y, 0.0));
        }
        else{
            n = vec4(0.0, 1.0, 0.0, 0.0);
        }
    } else {
        color = interpolateColor(h);
        n = interpolateNormal(h);
    }
}


struct trace_state_t
{
    vec4 origin;  // start of ray
    vec4 dir;     // direction
    vec4 color;   // color after multiple bounces
    vec4 localColor;   // color of the material (after interpolation)
    hitinfo_t h;  // what the ray hits (triangle Id, u, v, lambda)
    vec4 hit;     // point the ray hits 
    vec4 Ld;      // direction to light at destination
    vec4 N;       // normal at destination
    bool inSurf;  // is inside surface
};

vec4 trace(vec4 origin, vec4 dir)
{
    // These variables are for TP2
    trace_state_t stack[MAX_TRACE + 1];
    bool fallback[MAX_TRACE + 1];
    int sp = 0;

	// These are for TP1:
    hitinfo_t hl;
    vec4 hit;
    vec4 localColor;
    vec4 N;

    float specular_factor, LdN;

	// if (firstIntersection(origin, dir, hl)) {
	// 	getLocal(origin, dir, hl, localColor, hit, N);

    //     // shadow masking
    //     vec4 l = normalize(vec4(lightPosition, 1.) - stack[sp].hit);
    //     float shadowMask = (dot(l, N) < 0 || isIntersected(hit+1000.*EPS*N, l)) ? 0. : 1.;

	// 	return directIllumination(localColor, Ka, Kd, hit, N, -dir, l, vec4(lightIntensity, 1), shadowMask);
	// }

    bool inSurf = false;
    float sens = -1.;

    fallback[sp] = firstIntersection(origin, dir, hl);
    while (sp < MAX_TRACE + 1 && fallback[sp]) {
        
        getLocal(origin, dir, hl, localColor, hit, N);
        
        stack[sp].origin = origin;
        stack[sp].dir = dir;
        stack[sp].localColor = localColor;
        stack[sp].h = hl;
        stack[sp].hit = hit;
        stack[sp].Ld = normalize(vec4(lightPosition, 1.) - hit);
        stack[sp].N = N;
        stack[sp].inSurf = inSurf;

        // Refletion speculaire
        dir = reflect(dir, N);
        origin = hit + 1000 * EPS * N;
        
        // Refraction / transparence
        float etaMoy = (etaReal.r+etaReal.g+etaReal.b)/3.;
        float etaSurf = inSurf ? 1./etaMoy : etaMoy;
        vec4 F = fresnel(dot(N, dir), vec3(etaSurf), vec3(0.));
        
        // vec4 trans = stack[sp].dir;
        vec4 trans = refract(stack[sp].dir, N, 1./etaSurf);
        vec4 transOri = hit + sens * 1000 * EPS * N;

        bool test = (transparent && (stack[sp].h.hit_vptr != GROUND_VPTR) && hash13(origin.xyz + frame_index*42.123) > F.x);
        
        if (test) {
            dir = trans;
            origin = transOri;
            sens = -sens;
            inSurf = !(inSurf);
        }

        sp += 1;
        fallback[sp] = firstIntersection(origin, dir, hl);
    }

    vec2 envCoord = vec2(atan(dir.x, dir.z)*M_1_PI*0.5+0.5, 1.-acos(dir.y)*M_1_PI);
    vec4 color = vec4(0.);
    // vec4 color = texture(envMap, envCoord);

    while (sp > 0) {
        sp -= 1;

        vec4 F = vec4(1.);
        if (!transparent || stack[sp].h.hit_vptr == GROUND_VPTR) {
            F = fresnel(dot(stack[sp].N, reflect(stack[sp].dir, stack[sp].N)), etaReal, etaImag);
        }

        vec4 indCol = color * F;
        // directIllumination(
        //     stack[sp].localColor,
        //     0., 0.,
        //     stack[sp].hit,
        //     stack[sp].N,
        //     -stack[sp].dir,
        //     reflect(stack[sp].dir, stack[sp].N),
        //     color,
        //     1.
        // );
        
        // shadow masking
        vec4 l = normalize(vec4(lightPosition, 1.) - stack[sp].hit);
        float shadowMask = (dot(l, stack[sp].N) < 0 || isIntersected(stack[sp].hit+1000*EPS*stack[sp].N, l)) ? 0. : 1.;

        vec4 dirCol = directIllumination(
            stack[sp].localColor,
            (transparent && stack[sp].h.hit_vptr != GROUND_VPTR) ? 0. : Ka,
            (transparent && stack[sp].h.hit_vptr != GROUND_VPTR) ? 0. : Kd,
            stack[sp].hit,
            stack[sp].N,
            -stack[sp].dir,
            l,
            vec4(lightIntensity, 1),
            shadowMask
        );

        // On fait du brouillard
        // http://www.sci.utah.edu/publications/pegoraro09/Pegoraro_CGF09.pdf
        vec3 coefExp = vec3(0.6, 0.05, 0.01) * 0.5;

        float d = length(stack[sp].origin - stack[sp].hit);
        vec3 absoCoef = stack[sp].inSurf ? vec3(1.) : exp(-coefExp*d);
        float dbis = length(lightPosition - stack[sp].hit.xyz);
        vec3 absoCoefL = stack[sp].inSurf ? vec3(1.) : exp(-coefExp*dbis);

        color = vec4((dirCol.rgb * absoCoefL + indCol.rgb) * absoCoef, 1.);

        // color = vec4(vec3(d) / 40., 1);
        stack[sp].color = color;
    }

    return color;
}

layout (local_size_x = 8, local_size_y = 8) in;
void main(void) {
	// Convert local screen coordinates into world coordinates

    ivec2 pix = ivec2(gl_GlobalInvocationID.xy);
    
    vec4 previousColor = imageLoad(framebuffer, pix);
    vec4 nextColor = previousColor;
    vec4 previousVariance = imageLoad(variancebuffer, pix);
    vec4 nextVariance = previousVariance;
    vec4 sigma = sqrt(previousVariance - previousColor * previousColor);

    if (frame_index > 10 && max(sigma.x, max(sigma.y, sigma.z)) < 0.05) {
        return;
    }

    ivec2 size = imageSize(framebuffer);
    if (pix.x >= size.x || pix.y >= size.y) {
        return;
    }

    // golden noise random
    // float rd_x = gold_noise(vec2(gl_GlobalInvocationID.xy), fract(129.4535*frame_index)) - 0.5;
    // float rd_y = gold_noise(vec2(gl_GlobalInvocationID.xy), fract(257.249*frame_index)) - 0.5;

    // halton random
    int offset = int(gold_noise(vec2(gl_GlobalInvocationID.xy), 491.214) * HALTON_SIZE);
    float rd_x = halton2[(frame_index + offset) % HALTON_SIZE] - 0.5;
    float rd_y = halton3[(frame_index + offset) % HALTON_SIZE] - 0.5;

    vec2 shift = vec2(rd_x, rd_y);
    vec2 pos = (vec2(pix) + shift) / (size - vec2(0.5, 0.5));

    // pos in [0,1]^2 Need it in [-1,1]^2:
    pos = 2 * pos - vec2(1., 1.);

    // Step 1: I need pixel coordinates.
    vec4 worldPos = vec4(pos.x, pos.y, 1.0, 1.0);
    worldPos = persp_inverse * worldPos;
    worldPos /= worldPos.w;
    worldPos.w = 0;
    worldPos = normalize(worldPos);
    // Step 2: ray direction:
    vec4 dir = normalize((mat_inverse * worldPos));
    vec4 eye = (mat_inverse * vec4(0, 0, 0, 1));
    vec4 color = trace(eye, dir);

    if (gammaCorrection) color = pow(color, vec4(.4545));

    // if (color.r > 1. || color.g > 1. || color.b > 1.) color = vec4(1, 0, 1, 1);

    // if (isnan(color.x)) color = vec4(1, 1, 0, 1);

    // color = vec4(rd_x+0.5, rd_y+0.5, 0, 1);

    nextColor = (previousColor * frame_index + color) / (frame_index + 1.);

    nextVariance = (previousVariance * frame_index + color*color) / (frame_index + 1.);

    // vec4 sigma = sqrt(nextVariance - nextColor * nextColor);
    // if (max(sigma.x, max(sigma.y, sigma.z)) < 0.1) {
    //     nextColor = vec4(0, 1, 1, 1);
    // }

    // halton point visualization
    // vec2 uv = pix / vec2(640, 480);
    // nextColor = vec4(0, 0, 0, 1);
    // float threshold = 0.005;
    // for (int i = 0; i < HALTON_SIZE; i++) {
    //     if (abs(halton2[i] - uv.x) < threshold && abs(halton3[i] - uv.y) < threshold) {
    //         nextColor = vec4(1, 1, 1, 1);
    //     }
    // }

    // fresnel function visualisation
    // vec2 uv = vec2(1, 1) * pix / size;
    // nextColor = vec4(smoothstep(0.05, 0., abs(fresnel(cos(uv.x*M_PI/2.), etaReal, etaImag).xyz-vec3(uv.y))), 1.);
    // nextColor.rgb += smoothstep(0.005, 0., abs(vec3(cos(uv.x*M_PI/2.)) - vec3(uv.y)));
    // if (abs(uv.y - 1.) < 0.002) {
    //     nextColor = vec4(1, 0, 0, 1);
    // }
    // if (isnan(fresnel(cos(uv.x*M_PI/2.), etaReal, etaImag).z)) nextColor = vec4(1, 0, 1, 1);

    // fresnel color visualisation
    // vec2 uv = vec2(1, 2) * pix / vec2(640, 480);
    // nextColor = uv.y > 1. ? vec4(1, 0, 0, 1) : vec4(0, 0, 1, 1);
    // if (abs(uv.y - 1.) < 0.05) {
    //     nextColor = vec4(0, 0, 0, 1);
    // }

    // fresnel color visualisation
    // vec2 uv = vec2(100, 1) * pix / size;
    // nextColor = vec4(smoothstep(0.005, 0., abs(exp(-vec3(0.6, 0.05, 0.01)*uv.x)-vec3(uv.y))), 1.);

    imageStore(variancebuffer, pix, nextVariance);
    imageStore(framebuffer, pix, nextColor);
}






























        // Monte-Carlo
        // Refletion uniform
        // float phi = 2. * M_PI * hash12(hit.xy + 14.75 * fract(frame_index * 5945.269));
        // float u = 2. * hash12(hit.zy + 27.43 * fract(frame_index * 1426.816)) - 1.;
        // float root = sqrt(1. - u*u);
        // dir = vec4(root*cos(phi), root*sin(phi), u, 0.);
        // dir = dot(dir, N) > 0 ? dir : -dir;